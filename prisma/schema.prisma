// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  address   String?

  // Relacionamentos
  fishingTrips FishingTrip[] // Um usuário pode estar em várias pescarias
}

model FishingTrip {
  id           Int        @id @default(autoincrement())
  date         DateTime
  address      String
  totalExpense Float
  status       TripStatus // pendente | finalizada | cancelada

  // Relacionamentos
  users        User[] // N:N -> vários usuários podem estar na mesma pescaria
  guides       Guide[] // N:N -> uma pescaria pode ter vários guias/marinas
  fishingSpots FishingSpot[] // N:N -> uma pescaria pode incluir vários pontos de pesca
}

model FishingSpot {
  id          Int      @id @default(autoincrement())
  name        String
  rating      Int
  description String   @db.VarChar(170)
  type        SpotType // embarcado | pesca e pague | beira de rio

  fishingTrips FishingTrip[]
}

model Guide {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  rating      Int
  address     String
  type        GuideType // marina | guia de pesca | barqueiro
  whatsapp    String?
  phone       String?

  fishingTrips FishingTrip[]
}

enum TripStatus {
  PENDING
  FINISHED
  CANCELED
}

enum SpotType {
  EMBARCADO
  PESCA_E_PAGUE
  BEIRA_RIO
}

enum GuideType {
  MARINA
  GUIA_DE_PESCA
  BARQUEIRO
}
